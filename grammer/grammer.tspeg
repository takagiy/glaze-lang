PROGRAM    := toplevels=TOPLEVEL* $
TOPLEVEL   := STRUCTDEF | FUNCDEF | EXTERNFUNC
STRUCTDEF  := _ 'struct' __ name=IDENTIFIER _ '{' _ f=FIELDS? _ '}' _
              .fields = FIELD[] { return this.f ? this.f.v : []; }
FIELDS     := h=FIELD t={ _ ',' _ v=FIELD}*
              .v = FIELD[] { return [this.h].concat(t.map(e => e.v)); }
FIELD      := name=IDENTIFIER _ ':' _ type=TYPE
FUNCDEF    := _ v=VISIBILITY? _ 'fn' __ name=IDENTIFIER _ '\(' _ p=FIELDS? _ '\)' _ '->' _ returnType=TYPE _ '{' _ b=BODY? _ '}' _
              .params = FIELD[] { return this.p ? this.p.v : []; }
              .body = STATEMENT[] { return this.b ? this.b.v : []; }
              .isPublic = boolean { return Boolean(this.v); }
VISIBILITY := 'pub'
BODY       := h=STATEMENT _ ';' _ t={v=STATEMENT _ ';' _}*
              .v = STATEMENT[] { return [this.h].concat(t.map(e => e.v)); }
STATEMENT  := LET | RETURN | CALL
LET        := _ 'let' __ name=IDENTIFIER _ '=' _ expr=EXPR
EXPR       := ESUM
ESUM       := SUM | EFAC
EFAC       := FAC | ECALL
ECALL      := CALL | EDOT
EDOT       := DOT | EATOM
EATOM      := ATOM
SUM        := left=EFAC _ '\+' _ right=ESUM
FAC        := left=ECALL _ '\*' _ right=EFAC
CALL       := callee=EDOT _ '\(' _ a=ARGS? _ '\)' _
              .args = EXPR[] { return this.a ? this.a.v : []; }
ARGS       := h=EXPR t={_ ',' _ v=EXPR }*
              .v = EXPR[] { return [this.h].concat(t.map(e => e.v)); }
DOT        := left=EDOT _ '\.' _ right=EATOM 
ATOM       := VARREF | INTCONST
VARREF     := name=IDENTIFIER
INTCONST   := s='[\-\+]?\d+'
              .value = number { return parseInt(this.s); }
RETURN     := _ 'return' _ expr=EXPR
EXTERNFUNC := _ 'import' __ externalName=EXTNAME _ 'as' __ 'fn' _ importName=IDENTIFIER _ '\(' _ p=FIELDS? _ '\)' _ '->' _ returnType=TYPE _ ';' _
              .params = FIELD[] { return this.p ? this.p.v : []; }
EXTNAME    := '[a-zA-Z][a-zA-Z\d_]*(\.[a-zA-Z][a-zA-Z\d_]*)*'
TYPE       := name=IDENTIFIER
IDENTIFIER := '[a-zA-Z][a-zA-Z\d_]*'
_          := '\s*'
__         := '\s+'
