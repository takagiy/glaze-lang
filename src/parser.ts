/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* PROGRAM   := toplevels=TOPLEVEL* $
* TOPLEVEL  := STRUCTDEF
* STRUCTDEF := _ 'struct' __ name=IDENTIFIER _ '{' _ f=FIELDS? _ '}' _
*              .fields = FIELD[] { return this.f ? this.f.v : []; }
* FIELDS    := h=FIELD t={ _ ',' _ v=FIELD}*
*              .v = FIELD[] { return [this.h].concat(t.map(e => e.v)); }
* FIELD     := name=IDENTIFIER _ ':' _ type=TYPE
* TYPE      := name=IDENTIFIER
* IDENTIFIER:= '[a-zA-Z][a-zA-Z\d_]*'
* _         := '\s*'
* __        := '\s+'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    PROGRAM = "PROGRAM",
    TOPLEVEL = "TOPLEVEL",
    STRUCTDEF = "STRUCTDEF",
    FIELDS = "FIELDS",
    FIELDS_$0 = "FIELDS_$0",
    FIELD = "FIELD",
    TYPE = "TYPE",
    IDENTIFIER = "IDENTIFIER",
    _ = "_",
    __ = "__",
    $EOF = "$EOF",
}
export interface PROGRAM {
    kind: ASTKinds.PROGRAM;
    toplevels: TOPLEVEL[];
}
export type TOPLEVEL = STRUCTDEF;
export class STRUCTDEF {
    public kind: ASTKinds.STRUCTDEF = ASTKinds.STRUCTDEF;
    public name: IDENTIFIER;
    public f: Nullable<FIELDS>;
    public fields: FIELD[];
    constructor(name: IDENTIFIER, f: Nullable<FIELDS>){
        this.name = name;
        this.f = f;
        this.fields = ((): FIELD[] => {
        return this.f ? this.f.v : [];
        })();
    }
}
export class FIELDS {
    public kind: ASTKinds.FIELDS = ASTKinds.FIELDS;
    public h: FIELD;
    public t: FIELDS_$0[];
    public v: FIELD[];
    constructor(h: FIELD, t: FIELDS_$0[]){
        this.h = h;
        this.t = t;
        this.v = ((): FIELD[] => {
        return [this.h].concat(t.map(e => e.v));
        })();
    }
}
export interface FIELDS_$0 {
    kind: ASTKinds.FIELDS_$0;
    v: FIELD;
}
export interface FIELD {
    kind: ASTKinds.FIELD;
    name: IDENTIFIER;
    type: TYPE;
}
export interface TYPE {
    kind: ASTKinds.TYPE;
    name: IDENTIFIER;
}
export type IDENTIFIER = string;
export type _ = string;
export type __ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchPROGRAM($$dpth: number, $$cr?: ErrorTracker): Nullable<PROGRAM> {
        return this.run<PROGRAM>($$dpth,
            () => {
                let $scope$toplevels: Nullable<TOPLEVEL[]>;
                let $$res: Nullable<PROGRAM> = null;
                if (true
                    && ($scope$toplevels = this.loop<TOPLEVEL>(() => this.matchTOPLEVEL($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PROGRAM, toplevels: $scope$toplevels};
                }
                return $$res;
            });
    }
    public matchTOPLEVEL($$dpth: number, $$cr?: ErrorTracker): Nullable<TOPLEVEL> {
        return this.matchSTRUCTDEF($$dpth + 1, $$cr);
    }
    public matchSTRUCTDEF($$dpth: number, $$cr?: ErrorTracker): Nullable<STRUCTDEF> {
        return this.run<STRUCTDEF>($$dpth,
            () => {
                let $scope$name: Nullable<IDENTIFIER>;
                let $scope$f: Nullable<Nullable<FIELDS>>;
                let $$res: Nullable<STRUCTDEF> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:struct)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$f = this.matchFIELDS($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new STRUCTDEF($scope$name, $scope$f);
                }
                return $$res;
            });
    }
    public matchFIELDS($$dpth: number, $$cr?: ErrorTracker): Nullable<FIELDS> {
        return this.run<FIELDS>($$dpth,
            () => {
                let $scope$h: Nullable<FIELD>;
                let $scope$t: Nullable<FIELDS_$0[]>;
                let $$res: Nullable<FIELDS> = null;
                if (true
                    && ($scope$h = this.matchFIELD($$dpth + 1, $$cr)) !== null
                    && ($scope$t = this.loop<FIELDS_$0>(() => this.matchFIELDS_$0($$dpth + 1, $$cr), 0, -1)) !== null
                ) {
                    $$res = new FIELDS($scope$h, $scope$t);
                }
                return $$res;
            });
    }
    public matchFIELDS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FIELDS_$0> {
        return this.run<FIELDS_$0>($$dpth,
            () => {
                let $scope$v: Nullable<FIELD>;
                let $$res: Nullable<FIELDS_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchFIELD($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FIELDS_$0, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchFIELD($$dpth: number, $$cr?: ErrorTracker): Nullable<FIELD> {
        return this.run<FIELD>($$dpth,
            () => {
                let $scope$name: Nullable<IDENTIFIER>;
                let $scope$type: Nullable<TYPE>;
                let $$res: Nullable<FIELD> = null;
                if (true
                    && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchTYPE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FIELD, name: $scope$name, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchTYPE($$dpth: number, $$cr?: ErrorTracker): Nullable<TYPE> {
        return this.run<TYPE>($$dpth,
            () => {
                let $scope$name: Nullable<IDENTIFIER>;
                let $$res: Nullable<TYPE> = null;
                if (true
                    && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.TYPE, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchIDENTIFIER($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER> {
        return this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z\d_]*)`, "", $$dpth + 1, $$cr);
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, "", $$dpth + 1, $$cr);
    }
    public match__($$dpth: number, $$cr?: ErrorTracker): Nullable<__> {
        return this.regexAccept(String.raw`(?:\s+)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchPROGRAM(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchPROGRAM(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchPROGRAM(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<PROGRAM>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}