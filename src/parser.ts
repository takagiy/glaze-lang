/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* PROGRAM    := toplevels=TOPLEVEL* $
* TOPLEVEL   := STRUCTDEF | FUNCDEF | EXTERNFUNC
* STRUCTDEF  := _ 'struct' __ name=IDENTIFIER _ '{' _ f=FIELDS? _ '}' _
*               .fields = FIELD[] { return this.f ? this.f.v : []; }
* FIELDS     := h=FIELD t={ _ ',' _ v=FIELD}*
*               .v = FIELD[] { return [this.h].concat(t.map(e => e.v)); }
* FIELD      := name=IDENTIFIER _ ':' _ type=TYPE
* FUNCDEF    := _ v=VISIBILITY? _ 'fn' __ name=IDENTIFIER _ '\(' _ p=FIELDS? _ '\)' _ '->' _ returnType=TYPE _ '{' _ b=BODY? _ '}' _
*               .params = FIELD[] { return this.p ? this.p.v : []; }
*               .body = STATEMENT[] { return this.b ? this.b.v : []; }
*               .isPublic = boolean { return Boolean(this.v); }
* VISIBILITY := 'pub'
* BODY       := h=STATEMENT _ ';' _ t={v=STATEMENT _ ';' _}*
*               .v = STATEMENT[] { return [this.h].concat(t.map(e => e.v)); }
* STATEMENT  := LET | RETURN | CALL
* LET        := _ 'let' __ name=IDENTIFIER _ '=' _ expr=EXPR
* EXPR       := ESUM
* ESUM       := SUM | EFAC
* EFAC       := FAC | ECALL
* ECALL      := CALL | EDOT
* EDOT       := DOT | EATOM
* EATOM      := ATOM
* SUM        := left=EFAC _ '\+' _ right=ESUM
* FAC        := left=ECALL _ '\*' _ right=EFAC
* CALL       := callee=ECALL _ '\(' _ a=ARGS? _ '\)' _
*               .args = EXPR[] { return this.a ? this.a.v : []; }
* ARGS       := h=EXPR t={_ ',' _ v=EXPR }*
*               .v = EXPR[] { return [this.h].concat(t.map(e => e.v)); }
* DOT        := left=EDOT _ '\.' _ right=EATOM 
* ATOM       := VARREF | INTCONST
* VARREF     := name=IDENTIFIER
* INTCONST   := s='[\-\+]?\d+'
*               .value = number { return parseInt(this.s); }
* RETURN     := _ 'return' _ expr=EXPR
* EXTERNFUNC := _ 'import' __ externalName=EXTNAME _ 'as' __ 'fn' _ importName=IDENTIFIER _ '\(' _ p=FIELDS? _ '\)' _ '->' _ returnType=TYPE _ ';' _
*               .params = FIELD[] { return this.p ? this.p.v : []; }
* EXTNAME    := '[a-zA-Z][a-zA-Z\d_]*(\.[a-zA-Z][a-zA-Z\d_]*)*'
* TYPE       := name=IDENTIFIER
* IDENTIFIER := '[a-zA-Z][a-zA-Z\d_]*'
* _          := '\s*'
* __         := '\s+'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    PROGRAM = "PROGRAM",
    TOPLEVEL_1 = "TOPLEVEL_1",
    TOPLEVEL_2 = "TOPLEVEL_2",
    TOPLEVEL_3 = "TOPLEVEL_3",
    STRUCTDEF = "STRUCTDEF",
    FIELDS = "FIELDS",
    FIELDS_$0 = "FIELDS_$0",
    FIELD = "FIELD",
    FUNCDEF = "FUNCDEF",
    VISIBILITY = "VISIBILITY",
    BODY = "BODY",
    BODY_$0 = "BODY_$0",
    STATEMENT_1 = "STATEMENT_1",
    STATEMENT_2 = "STATEMENT_2",
    STATEMENT_3 = "STATEMENT_3",
    LET = "LET",
    EXPR = "EXPR",
    ESUM_1 = "ESUM_1",
    ESUM_2 = "ESUM_2",
    EFAC_1 = "EFAC_1",
    EFAC_2 = "EFAC_2",
    ECALL_1 = "ECALL_1",
    ECALL_2 = "ECALL_2",
    EDOT_1 = "EDOT_1",
    EDOT_2 = "EDOT_2",
    EATOM = "EATOM",
    SUM = "SUM",
    FAC = "FAC",
    CALL = "CALL",
    ARGS = "ARGS",
    ARGS_$0 = "ARGS_$0",
    DOT = "DOT",
    ATOM_1 = "ATOM_1",
    ATOM_2 = "ATOM_2",
    VARREF = "VARREF",
    INTCONST = "INTCONST",
    RETURN = "RETURN",
    EXTERNFUNC = "EXTERNFUNC",
    EXTNAME = "EXTNAME",
    TYPE = "TYPE",
    IDENTIFIER = "IDENTIFIER",
    _ = "_",
    __ = "__",
    $EOF = "$EOF",
}
export interface PROGRAM {
    kind: ASTKinds.PROGRAM;
    toplevels: TOPLEVEL[];
}
export type TOPLEVEL = TOPLEVEL_1 | TOPLEVEL_2 | TOPLEVEL_3;
export type TOPLEVEL_1 = STRUCTDEF;
export type TOPLEVEL_2 = FUNCDEF;
export type TOPLEVEL_3 = EXTERNFUNC;
export class STRUCTDEF {
    public kind: ASTKinds.STRUCTDEF = ASTKinds.STRUCTDEF;
    public name: IDENTIFIER;
    public f: Nullable<FIELDS>;
    public fields: FIELD[];
    constructor(name: IDENTIFIER, f: Nullable<FIELDS>){
        this.name = name;
        this.f = f;
        this.fields = ((): FIELD[] => {
        return this.f ? this.f.v : [];
        })();
    }
}
export class FIELDS {
    public kind: ASTKinds.FIELDS = ASTKinds.FIELDS;
    public h: FIELD;
    public t: FIELDS_$0[];
    public v: FIELD[];
    constructor(h: FIELD, t: FIELDS_$0[]){
        this.h = h;
        this.t = t;
        this.v = ((): FIELD[] => {
        return [this.h].concat(t.map(e => e.v));
        })();
    }
}
export interface FIELDS_$0 {
    kind: ASTKinds.FIELDS_$0;
    v: FIELD;
}
export interface FIELD {
    kind: ASTKinds.FIELD;
    name: IDENTIFIER;
    type: TYPE;
}
export class FUNCDEF {
    public kind: ASTKinds.FUNCDEF = ASTKinds.FUNCDEF;
    public v: Nullable<VISIBILITY>;
    public name: IDENTIFIER;
    public p: Nullable<FIELDS>;
    public returnType: TYPE;
    public b: Nullable<BODY>;
    public params: FIELD[];
    public body: STATEMENT[];
    public isPublic: boolean;
    constructor(v: Nullable<VISIBILITY>, name: IDENTIFIER, p: Nullable<FIELDS>, returnType: TYPE, b: Nullable<BODY>){
        this.v = v;
        this.name = name;
        this.p = p;
        this.returnType = returnType;
        this.b = b;
        this.params = ((): FIELD[] => {
        return this.p ? this.p.v : [];
        })();
        this.body = ((): STATEMENT[] => {
        return this.b ? this.b.v : [];
        })();
        this.isPublic = ((): boolean => {
        return Boolean(this.v);
        })();
    }
}
export type VISIBILITY = string;
export class BODY {
    public kind: ASTKinds.BODY = ASTKinds.BODY;
    public h: STATEMENT;
    public t: BODY_$0[];
    public v: STATEMENT[];
    constructor(h: STATEMENT, t: BODY_$0[]){
        this.h = h;
        this.t = t;
        this.v = ((): STATEMENT[] => {
        return [this.h].concat(t.map(e => e.v));
        })();
    }
}
export interface BODY_$0 {
    kind: ASTKinds.BODY_$0;
    v: STATEMENT;
}
export type STATEMENT = STATEMENT_1 | STATEMENT_2 | STATEMENT_3;
export type STATEMENT_1 = LET;
export type STATEMENT_2 = RETURN;
export type STATEMENT_3 = CALL;
export interface LET {
    kind: ASTKinds.LET;
    name: IDENTIFIER;
    expr: EXPR;
}
export type EXPR = ESUM;
export type ESUM = ESUM_1 | ESUM_2;
export type ESUM_1 = SUM;
export type ESUM_2 = EFAC;
export type EFAC = EFAC_1 | EFAC_2;
export type EFAC_1 = FAC;
export type EFAC_2 = ECALL;
export type ECALL = ECALL_1 | ECALL_2;
export type ECALL_1 = CALL;
export type ECALL_2 = EDOT;
export type EDOT = EDOT_1 | EDOT_2;
export type EDOT_1 = DOT;
export type EDOT_2 = EATOM;
export type EATOM = ATOM;
export interface SUM {
    kind: ASTKinds.SUM;
    left: EFAC;
    right: ESUM;
}
export interface FAC {
    kind: ASTKinds.FAC;
    left: ECALL;
    right: EFAC;
}
export class CALL {
    public kind: ASTKinds.CALL = ASTKinds.CALL;
    public callee: ECALL;
    public a: Nullable<ARGS>;
    public args: EXPR[];
    constructor(callee: ECALL, a: Nullable<ARGS>){
        this.callee = callee;
        this.a = a;
        this.args = ((): EXPR[] => {
        return this.a ? this.a.v : [];
        })();
    }
}
export class ARGS {
    public kind: ASTKinds.ARGS = ASTKinds.ARGS;
    public h: EXPR;
    public t: ARGS_$0[];
    public v: EXPR[];
    constructor(h: EXPR, t: ARGS_$0[]){
        this.h = h;
        this.t = t;
        this.v = ((): EXPR[] => {
        return [this.h].concat(t.map(e => e.v));
        })();
    }
}
export interface ARGS_$0 {
    kind: ASTKinds.ARGS_$0;
    v: EXPR;
}
export interface DOT {
    kind: ASTKinds.DOT;
    left: EDOT;
    right: EATOM;
}
export type ATOM = ATOM_1 | ATOM_2;
export type ATOM_1 = VARREF;
export type ATOM_2 = INTCONST;
export interface VARREF {
    kind: ASTKinds.VARREF;
    name: IDENTIFIER;
}
export class INTCONST {
    public kind: ASTKinds.INTCONST = ASTKinds.INTCONST;
    public s: string;
    public value: number;
    constructor(s: string){
        this.s = s;
        this.value = ((): number => {
        return parseInt(this.s);
        })();
    }
}
export interface RETURN {
    kind: ASTKinds.RETURN;
    expr: EXPR;
}
export class EXTERNFUNC {
    public kind: ASTKinds.EXTERNFUNC = ASTKinds.EXTERNFUNC;
    public externalName: EXTNAME;
    public importName: IDENTIFIER;
    public p: Nullable<FIELDS>;
    public returnType: TYPE;
    public params: FIELD[];
    constructor(externalName: EXTNAME, importName: IDENTIFIER, p: Nullable<FIELDS>, returnType: TYPE){
        this.externalName = externalName;
        this.importName = importName;
        this.p = p;
        this.returnType = returnType;
        this.params = ((): FIELD[] => {
        return this.p ? this.p.v : [];
        })();
    }
}
export type EXTNAME = string;
export interface TYPE {
    kind: ASTKinds.TYPE;
    name: IDENTIFIER;
}
export type IDENTIFIER = string;
export type _ = string;
export type __ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$ECALL$memo.clear();
        this.$scope$EDOT$memo.clear();
    }
    protected $scope$ECALL$memo: Map<number, [Nullable<ECALL>, PosInfo]> = new Map();
    protected $scope$EDOT$memo: Map<number, [Nullable<EDOT>, PosInfo]> = new Map();
    public matchPROGRAM($$dpth: number, $$cr?: ErrorTracker): Nullable<PROGRAM> {
        return this.run<PROGRAM>($$dpth,
            () => {
                let $scope$toplevels: Nullable<TOPLEVEL[]>;
                let $$res: Nullable<PROGRAM> = null;
                if (true
                    && ($scope$toplevels = this.loop<TOPLEVEL>(() => this.matchTOPLEVEL($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PROGRAM, toplevels: $scope$toplevels};
                }
                return $$res;
            });
    }
    public matchTOPLEVEL($$dpth: number, $$cr?: ErrorTracker): Nullable<TOPLEVEL> {
        return this.choice<TOPLEVEL>([
            () => this.matchTOPLEVEL_1($$dpth + 1, $$cr),
            () => this.matchTOPLEVEL_2($$dpth + 1, $$cr),
            () => this.matchTOPLEVEL_3($$dpth + 1, $$cr),
        ]);
    }
    public matchTOPLEVEL_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TOPLEVEL_1> {
        return this.matchSTRUCTDEF($$dpth + 1, $$cr);
    }
    public matchTOPLEVEL_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TOPLEVEL_2> {
        return this.matchFUNCDEF($$dpth + 1, $$cr);
    }
    public matchTOPLEVEL_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TOPLEVEL_3> {
        return this.matchEXTERNFUNC($$dpth + 1, $$cr);
    }
    public matchSTRUCTDEF($$dpth: number, $$cr?: ErrorTracker): Nullable<STRUCTDEF> {
        return this.run<STRUCTDEF>($$dpth,
            () => {
                let $scope$name: Nullable<IDENTIFIER>;
                let $scope$f: Nullable<Nullable<FIELDS>>;
                let $$res: Nullable<STRUCTDEF> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:struct)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$f = this.matchFIELDS($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new STRUCTDEF($scope$name, $scope$f);
                }
                return $$res;
            });
    }
    public matchFIELDS($$dpth: number, $$cr?: ErrorTracker): Nullable<FIELDS> {
        return this.run<FIELDS>($$dpth,
            () => {
                let $scope$h: Nullable<FIELD>;
                let $scope$t: Nullable<FIELDS_$0[]>;
                let $$res: Nullable<FIELDS> = null;
                if (true
                    && ($scope$h = this.matchFIELD($$dpth + 1, $$cr)) !== null
                    && ($scope$t = this.loop<FIELDS_$0>(() => this.matchFIELDS_$0($$dpth + 1, $$cr), 0, -1)) !== null
                ) {
                    $$res = new FIELDS($scope$h, $scope$t);
                }
                return $$res;
            });
    }
    public matchFIELDS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FIELDS_$0> {
        return this.run<FIELDS_$0>($$dpth,
            () => {
                let $scope$v: Nullable<FIELD>;
                let $$res: Nullable<FIELDS_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchFIELD($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FIELDS_$0, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchFIELD($$dpth: number, $$cr?: ErrorTracker): Nullable<FIELD> {
        return this.run<FIELD>($$dpth,
            () => {
                let $scope$name: Nullable<IDENTIFIER>;
                let $scope$type: Nullable<TYPE>;
                let $$res: Nullable<FIELD> = null;
                if (true
                    && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchTYPE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FIELD, name: $scope$name, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchFUNCDEF($$dpth: number, $$cr?: ErrorTracker): Nullable<FUNCDEF> {
        return this.run<FUNCDEF>($$dpth,
            () => {
                let $scope$v: Nullable<Nullable<VISIBILITY>>;
                let $scope$name: Nullable<IDENTIFIER>;
                let $scope$p: Nullable<Nullable<FIELDS>>;
                let $scope$returnType: Nullable<TYPE>;
                let $scope$b: Nullable<Nullable<BODY>>;
                let $$res: Nullable<FUNCDEF> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$v = this.matchVISIBILITY($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:fn)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$p = this.matchFIELDS($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:->)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$returnType = this.matchTYPE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$b = this.matchBODY($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new FUNCDEF($scope$v, $scope$name, $scope$p, $scope$returnType, $scope$b);
                }
                return $$res;
            });
    }
    public matchVISIBILITY($$dpth: number, $$cr?: ErrorTracker): Nullable<VISIBILITY> {
        return this.regexAccept(String.raw`(?:pub)`, "", $$dpth + 1, $$cr);
    }
    public matchBODY($$dpth: number, $$cr?: ErrorTracker): Nullable<BODY> {
        return this.run<BODY>($$dpth,
            () => {
                let $scope$h: Nullable<STATEMENT>;
                let $scope$t: Nullable<BODY_$0[]>;
                let $$res: Nullable<BODY> = null;
                if (true
                    && ($scope$h = this.matchSTATEMENT($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$t = this.loop<BODY_$0>(() => this.matchBODY_$0($$dpth + 1, $$cr), 0, -1)) !== null
                ) {
                    $$res = new BODY($scope$h, $scope$t);
                }
                return $$res;
            });
    }
    public matchBODY_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<BODY_$0> {
        return this.run<BODY_$0>($$dpth,
            () => {
                let $scope$v: Nullable<STATEMENT>;
                let $$res: Nullable<BODY_$0> = null;
                if (true
                    && ($scope$v = this.matchSTATEMENT($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BODY_$0, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchSTATEMENT($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT> {
        return this.choice<STATEMENT>([
            () => this.matchSTATEMENT_1($$dpth + 1, $$cr),
            () => this.matchSTATEMENT_2($$dpth + 1, $$cr),
            () => this.matchSTATEMENT_3($$dpth + 1, $$cr),
        ]);
    }
    public matchSTATEMENT_1($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT_1> {
        return this.matchLET($$dpth + 1, $$cr);
    }
    public matchSTATEMENT_2($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT_2> {
        return this.matchRETURN($$dpth + 1, $$cr);
    }
    public matchSTATEMENT_3($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT_3> {
        return this.matchCALL($$dpth + 1, $$cr);
    }
    public matchLET($$dpth: number, $$cr?: ErrorTracker): Nullable<LET> {
        return this.run<LET>($$dpth,
            () => {
                let $scope$name: Nullable<IDENTIFIER>;
                let $scope$expr: Nullable<EXPR>;
                let $$res: Nullable<LET> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:let)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchEXPR($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.LET, name: $scope$name, expr: $scope$expr};
                }
                return $$res;
            });
    }
    public matchEXPR($$dpth: number, $$cr?: ErrorTracker): Nullable<EXPR> {
        return this.matchESUM($$dpth + 1, $$cr);
    }
    public matchESUM($$dpth: number, $$cr?: ErrorTracker): Nullable<ESUM> {
        return this.choice<ESUM>([
            () => this.matchESUM_1($$dpth + 1, $$cr),
            () => this.matchESUM_2($$dpth + 1, $$cr),
        ]);
    }
    public matchESUM_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ESUM_1> {
        return this.matchSUM($$dpth + 1, $$cr);
    }
    public matchESUM_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ESUM_2> {
        return this.matchEFAC($$dpth + 1, $$cr);
    }
    public matchEFAC($$dpth: number, $$cr?: ErrorTracker): Nullable<EFAC> {
        return this.choice<EFAC>([
            () => this.matchEFAC_1($$dpth + 1, $$cr),
            () => this.matchEFAC_2($$dpth + 1, $$cr),
        ]);
    }
    public matchEFAC_1($$dpth: number, $$cr?: ErrorTracker): Nullable<EFAC_1> {
        return this.matchFAC($$dpth + 1, $$cr);
    }
    public matchEFAC_2($$dpth: number, $$cr?: ErrorTracker): Nullable<EFAC_2> {
        return this.matchECALL($$dpth + 1, $$cr);
    }
    public matchECALL($$dpth: number, $$cr?: ErrorTracker): Nullable<ECALL> {
        const fn = () => {
            return this.choice<ECALL>([
                () => this.matchECALL_1($$dpth + 1, $$cr),
                () => this.matchECALL_2($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$ECALL$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$ECALL$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<ECALL> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$ECALL$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchECALL_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ECALL_1> {
        return this.matchCALL($$dpth + 1, $$cr);
    }
    public matchECALL_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ECALL_2> {
        return this.matchEDOT($$dpth + 1, $$cr);
    }
    public matchEDOT($$dpth: number, $$cr?: ErrorTracker): Nullable<EDOT> {
        const fn = () => {
            return this.choice<EDOT>([
                () => this.matchEDOT_1($$dpth + 1, $$cr),
                () => this.matchEDOT_2($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$EDOT$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$EDOT$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<EDOT> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$EDOT$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchEDOT_1($$dpth: number, $$cr?: ErrorTracker): Nullable<EDOT_1> {
        return this.matchDOT($$dpth + 1, $$cr);
    }
    public matchEDOT_2($$dpth: number, $$cr?: ErrorTracker): Nullable<EDOT_2> {
        return this.matchEATOM($$dpth + 1, $$cr);
    }
    public matchEATOM($$dpth: number, $$cr?: ErrorTracker): Nullable<EATOM> {
        return this.matchATOM($$dpth + 1, $$cr);
    }
    public matchSUM($$dpth: number, $$cr?: ErrorTracker): Nullable<SUM> {
        return this.run<SUM>($$dpth,
            () => {
                let $scope$left: Nullable<EFAC>;
                let $scope$right: Nullable<ESUM>;
                let $$res: Nullable<SUM> = null;
                if (true
                    && ($scope$left = this.matchEFAC($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchESUM($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SUM, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchFAC($$dpth: number, $$cr?: ErrorTracker): Nullable<FAC> {
        return this.run<FAC>($$dpth,
            () => {
                let $scope$left: Nullable<ECALL>;
                let $scope$right: Nullable<EFAC>;
                let $$res: Nullable<FAC> = null;
                if (true
                    && ($scope$left = this.matchECALL($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\*)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchEFAC($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FAC, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchCALL($$dpth: number, $$cr?: ErrorTracker): Nullable<CALL> {
        return this.run<CALL>($$dpth,
            () => {
                let $scope$callee: Nullable<ECALL>;
                let $scope$a: Nullable<Nullable<ARGS>>;
                let $$res: Nullable<CALL> = null;
                if (true
                    && ($scope$callee = this.matchECALL($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$a = this.matchARGS($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new CALL($scope$callee, $scope$a);
                }
                return $$res;
            });
    }
    public matchARGS($$dpth: number, $$cr?: ErrorTracker): Nullable<ARGS> {
        return this.run<ARGS>($$dpth,
            () => {
                let $scope$h: Nullable<EXPR>;
                let $scope$t: Nullable<ARGS_$0[]>;
                let $$res: Nullable<ARGS> = null;
                if (true
                    && ($scope$h = this.matchEXPR($$dpth + 1, $$cr)) !== null
                    && ($scope$t = this.loop<ARGS_$0>(() => this.matchARGS_$0($$dpth + 1, $$cr), 0, -1)) !== null
                ) {
                    $$res = new ARGS($scope$h, $scope$t);
                }
                return $$res;
            });
    }
    public matchARGS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ARGS_$0> {
        return this.run<ARGS_$0>($$dpth,
            () => {
                let $scope$v: Nullable<EXPR>;
                let $$res: Nullable<ARGS_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchEXPR($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ARGS_$0, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchDOT($$dpth: number, $$cr?: ErrorTracker): Nullable<DOT> {
        return this.run<DOT>($$dpth,
            () => {
                let $scope$left: Nullable<EDOT>;
                let $scope$right: Nullable<EATOM>;
                let $$res: Nullable<DOT> = null;
                if (true
                    && ($scope$left = this.matchEDOT($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchEATOM($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.DOT, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchATOM($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM> {
        return this.choice<ATOM>([
            () => this.matchATOM_1($$dpth + 1, $$cr),
            () => this.matchATOM_2($$dpth + 1, $$cr),
        ]);
    }
    public matchATOM_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_1> {
        return this.matchVARREF($$dpth + 1, $$cr);
    }
    public matchATOM_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_2> {
        return this.matchINTCONST($$dpth + 1, $$cr);
    }
    public matchVARREF($$dpth: number, $$cr?: ErrorTracker): Nullable<VARREF> {
        return this.run<VARREF>($$dpth,
            () => {
                let $scope$name: Nullable<IDENTIFIER>;
                let $$res: Nullable<VARREF> = null;
                if (true
                    && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.VARREF, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchINTCONST($$dpth: number, $$cr?: ErrorTracker): Nullable<INTCONST> {
        return this.run<INTCONST>($$dpth,
            () => {
                let $scope$s: Nullable<string>;
                let $$res: Nullable<INTCONST> = null;
                if (true
                    && ($scope$s = this.regexAccept(String.raw`(?:[\-\+]?\d+)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new INTCONST($scope$s);
                }
                return $$res;
            });
    }
    public matchRETURN($$dpth: number, $$cr?: ErrorTracker): Nullable<RETURN> {
        return this.run<RETURN>($$dpth,
            () => {
                let $scope$expr: Nullable<EXPR>;
                let $$res: Nullable<RETURN> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:return)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchEXPR($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.RETURN, expr: $scope$expr};
                }
                return $$res;
            });
    }
    public matchEXTERNFUNC($$dpth: number, $$cr?: ErrorTracker): Nullable<EXTERNFUNC> {
        return this.run<EXTERNFUNC>($$dpth,
            () => {
                let $scope$externalName: Nullable<EXTNAME>;
                let $scope$importName: Nullable<IDENTIFIER>;
                let $scope$p: Nullable<Nullable<FIELDS>>;
                let $scope$returnType: Nullable<TYPE>;
                let $$res: Nullable<EXTERNFUNC> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:import)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$externalName = this.matchEXTNAME($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:as)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:fn)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$importName = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$p = this.matchFIELDS($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:->)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$returnType = this.matchTYPE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new EXTERNFUNC($scope$externalName, $scope$importName, $scope$p, $scope$returnType);
                }
                return $$res;
            });
    }
    public matchEXTNAME($$dpth: number, $$cr?: ErrorTracker): Nullable<EXTNAME> {
        return this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z\d_]*(\.[a-zA-Z][a-zA-Z\d_]*)*)`, "", $$dpth + 1, $$cr);
    }
    public matchTYPE($$dpth: number, $$cr?: ErrorTracker): Nullable<TYPE> {
        return this.run<TYPE>($$dpth,
            () => {
                let $scope$name: Nullable<IDENTIFIER>;
                let $$res: Nullable<TYPE> = null;
                if (true
                    && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.TYPE, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchIDENTIFIER($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER> {
        return this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z\d_]*)`, "", $$dpth + 1, $$cr);
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, "", $$dpth + 1, $$cr);
    }
    public match__($$dpth: number, $$cr?: ErrorTracker): Nullable<__> {
        return this.regexAccept(String.raw`(?:\s+)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchPROGRAM(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchPROGRAM(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchPROGRAM(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<PROGRAM>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}