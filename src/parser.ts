/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* PROGRAM    := toplevels=TOPLEVEL* $
* TOPLEVEL   := STRUCTDEF | FUNCDEF | EXTERNFUNC
* STRUCTDEF  := _ 'struct' __ name=IDENTIFIER _ '{' _ f=FIELDS? _ '}' _
*               .fields = FIELD[] { return this.f ? this.f.v : []; }
* FIELDS     := h=FIELD t={ _ ',' _ v=FIELD}*
*               .v = FIELD[] { return [this.h].concat(t.map(e => e.v)); }
* FIELD      := name=IDENTIFIER _ ':' _ type=TYPE
* FUNCDEF    := _ v=VISIBILITY? _ 'fn' __ name=IDENTIFIER _ '\(' _ p=FIELDS? _ '\)' _ '->' _ returnType=TYPE _ '{' _ b=BODY? _ '}' _
*               .params = FIELD[] { return this.p ? this.p.v : []; }
*               .body = STATEMENT[] { return this.b ? this.b.v : []; }
*               .isPublic = boolean { return Boolean(this.v); }
* VISIBILITY := 'pub'
* BODY       := h=STATEMENT _ ';' _ t={v=STATEMENT _ ';' _}*
*               .v = STATEMENT[] { return [this.h].concat(t.map(e => e.v)); }
* STATEMENT  := LET | RETURN | CALL
* LET        := _ 'let' __ name=IDENTIFIER _ '=' _ e=EXPR
*               .expr = SUM | FAC | CALL | DOT | ATOM { return this.e.v; }
* EXPR       := s=SUM
*               .v = SUM | FAC | CALL | DOT | ATOM { return this.s.fac || this.s; }
* SUM        := h=FAC t={ _ op='\+|-' _ v=FAC }*
*               .operands = (FAC | CALL | DOT | ATOM)[] { return [this.h.call || this.h].concat(t.map(e => e.v.call || e.v)); }
*               .fac = FAC | CALL | DOT | ATOM | undefined { return this.operands.length === 1 ? this.operands[0] : undefined; }
* FAC        := h=CALL t={ _ op='\*|/' _ v=CALL }*
*               .operands = (CALL | DOT | ATOM)[] { return [this.h.dot || this.h].concat(t.map(e => e.v.dot || e.v)); }
*               .call = CALL | DOT | ATOM | undefined { return this.operands.length === 1 ? this.operands[0] : undefined; }
* CALL       := h=DOT t={_ '\(' _ args=ARGS? _ '\)' _}*
*               .callee = DOT | ATOM { return this.h.atom || this.h; }
*               .args = (SUM | FAC | CALL | DOT | ATOM)[][] { return this.t.map(e => e.args ? e.args.v : []); }
*               .dot = DOT | ATOM | undefined { return this.args.length === 0 ? this.callee : undefined; }
* ARGS       := h=EXPR t={_ ',' _ v=EXPR }*
*               .v = (SUM | FAC | CALL | DOT | ATOM)[] { return [this.h.v].concat(t.map(e => e.v.v)); }
* DOT        := receiver=ATOM a={ _ op='\.' _ v=IDENTIFIER }*
*               .accessors = string[] { return this.a.map(e => e.v); }
*               .atom = ATOM | undefined { return this.accessors.length === 0 ? this.receiver : undefined; }
* ATOM       := VARREF | INTCONST
* VARREF     := name=IDENTIFIER
* INTCONST   := s='[\-\+]?\d+'
*               .value = number { return parseInt(this.s); }
* RETURN     := _ 'return' _ e=EXPR
*               .expr = SUM | FAC | CALL | DOT | ATOM { return this.e.v; }
* EXTERNFUNC := _ 'import' __ externalName=EXTNAME _ 'as' __ 'fn' _ importName=IDENTIFIER _ '\(' _ p=FIELDS? _ '\)' _ '->' _ returnType=TYPE _ ';' _
*               .params = FIELD[] { return this.p ? this.p.v : []; }
* EXTNAME    := '[a-zA-Z][a-zA-Z\d_]*(\.[a-zA-Z][a-zA-Z\d_]*)*'
* TYPE       := name=IDENTIFIER
* IDENTIFIER := '[a-zA-Z][a-zA-Z\d_]*'
* _          := '\s*'
* __         := '\s+'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    PROGRAM = "PROGRAM",
    TOPLEVEL_1 = "TOPLEVEL_1",
    TOPLEVEL_2 = "TOPLEVEL_2",
    TOPLEVEL_3 = "TOPLEVEL_3",
    STRUCTDEF = "STRUCTDEF",
    FIELDS = "FIELDS",
    FIELDS_$0 = "FIELDS_$0",
    FIELD = "FIELD",
    FUNCDEF = "FUNCDEF",
    VISIBILITY = "VISIBILITY",
    BODY = "BODY",
    BODY_$0 = "BODY_$0",
    STATEMENT_1 = "STATEMENT_1",
    STATEMENT_2 = "STATEMENT_2",
    STATEMENT_3 = "STATEMENT_3",
    LET = "LET",
    EXPR = "EXPR",
    SUM = "SUM",
    SUM_$0 = "SUM_$0",
    FAC = "FAC",
    FAC_$0 = "FAC_$0",
    CALL = "CALL",
    CALL_$0 = "CALL_$0",
    ARGS = "ARGS",
    ARGS_$0 = "ARGS_$0",
    DOT = "DOT",
    DOT_$0 = "DOT_$0",
    ATOM_1 = "ATOM_1",
    ATOM_2 = "ATOM_2",
    VARREF = "VARREF",
    INTCONST = "INTCONST",
    RETURN = "RETURN",
    EXTERNFUNC = "EXTERNFUNC",
    EXTNAME = "EXTNAME",
    TYPE = "TYPE",
    IDENTIFIER = "IDENTIFIER",
    _ = "_",
    __ = "__",
    $EOF = "$EOF",
}
export interface PROGRAM {
    kind: ASTKinds.PROGRAM;
    toplevels: TOPLEVEL[];
}
export type TOPLEVEL = TOPLEVEL_1 | TOPLEVEL_2 | TOPLEVEL_3;
export type TOPLEVEL_1 = STRUCTDEF;
export type TOPLEVEL_2 = FUNCDEF;
export type TOPLEVEL_3 = EXTERNFUNC;
export class STRUCTDEF {
    public kind: ASTKinds.STRUCTDEF = ASTKinds.STRUCTDEF;
    public name: IDENTIFIER;
    public f: Nullable<FIELDS>;
    public fields: FIELD[];
    constructor(name: IDENTIFIER, f: Nullable<FIELDS>){
        this.name = name;
        this.f = f;
        this.fields = ((): FIELD[] => {
        return this.f ? this.f.v : [];
        })();
    }
}
export class FIELDS {
    public kind: ASTKinds.FIELDS = ASTKinds.FIELDS;
    public h: FIELD;
    public t: FIELDS_$0[];
    public v: FIELD[];
    constructor(h: FIELD, t: FIELDS_$0[]){
        this.h = h;
        this.t = t;
        this.v = ((): FIELD[] => {
        return [this.h].concat(t.map(e => e.v));
        })();
    }
}
export interface FIELDS_$0 {
    kind: ASTKinds.FIELDS_$0;
    v: FIELD;
}
export interface FIELD {
    kind: ASTKinds.FIELD;
    name: IDENTIFIER;
    type: TYPE;
}
export class FUNCDEF {
    public kind: ASTKinds.FUNCDEF = ASTKinds.FUNCDEF;
    public v: Nullable<VISIBILITY>;
    public name: IDENTIFIER;
    public p: Nullable<FIELDS>;
    public returnType: TYPE;
    public b: Nullable<BODY>;
    public params: FIELD[];
    public body: STATEMENT[];
    public isPublic: boolean;
    constructor(v: Nullable<VISIBILITY>, name: IDENTIFIER, p: Nullable<FIELDS>, returnType: TYPE, b: Nullable<BODY>){
        this.v = v;
        this.name = name;
        this.p = p;
        this.returnType = returnType;
        this.b = b;
        this.params = ((): FIELD[] => {
        return this.p ? this.p.v : [];
        })();
        this.body = ((): STATEMENT[] => {
        return this.b ? this.b.v : [];
        })();
        this.isPublic = ((): boolean => {
        return Boolean(this.v);
        })();
    }
}
export type VISIBILITY = string;
export class BODY {
    public kind: ASTKinds.BODY = ASTKinds.BODY;
    public h: STATEMENT;
    public t: BODY_$0[];
    public v: STATEMENT[];
    constructor(h: STATEMENT, t: BODY_$0[]){
        this.h = h;
        this.t = t;
        this.v = ((): STATEMENT[] => {
        return [this.h].concat(t.map(e => e.v));
        })();
    }
}
export interface BODY_$0 {
    kind: ASTKinds.BODY_$0;
    v: STATEMENT;
}
export type STATEMENT = STATEMENT_1 | STATEMENT_2 | STATEMENT_3;
export type STATEMENT_1 = LET;
export type STATEMENT_2 = RETURN;
export type STATEMENT_3 = CALL;
export class LET {
    public kind: ASTKinds.LET = ASTKinds.LET;
    public name: IDENTIFIER;
    public e: EXPR;
    public expr: SUM | FAC | CALL | DOT | ATOM;
    constructor(name: IDENTIFIER, e: EXPR){
        this.name = name;
        this.e = e;
        this.expr = ((): SUM | FAC | CALL | DOT | ATOM => {
        return this.e.v;
        })();
    }
}
export class EXPR {
    public kind: ASTKinds.EXPR = ASTKinds.EXPR;
    public s: SUM;
    public v: SUM | FAC | CALL | DOT | ATOM;
    constructor(s: SUM){
        this.s = s;
        this.v = ((): SUM | FAC | CALL | DOT | ATOM => {
        return this.s.fac || this.s;
        })();
    }
}
export class SUM {
    public kind: ASTKinds.SUM = ASTKinds.SUM;
    public h: FAC;
    public t: SUM_$0[];
    public operands: (FAC | CALL | DOT | ATOM)[];
    public fac: FAC | CALL | DOT | ATOM | undefined;
    constructor(h: FAC, t: SUM_$0[]){
        this.h = h;
        this.t = t;
        this.operands = ((): (FAC | CALL | DOT | ATOM)[] => {
        return [this.h.call || this.h].concat(t.map(e => e.v.call || e.v));
        })();
        this.fac = ((): FAC | CALL | DOT | ATOM | undefined => {
        return this.operands.length === 1 ? this.operands[0] : undefined;
        })();
    }
}
export interface SUM_$0 {
    kind: ASTKinds.SUM_$0;
    op: string;
    v: FAC;
}
export class FAC {
    public kind: ASTKinds.FAC = ASTKinds.FAC;
    public h: CALL;
    public t: FAC_$0[];
    public operands: (CALL | DOT | ATOM)[];
    public call: CALL | DOT | ATOM | undefined;
    constructor(h: CALL, t: FAC_$0[]){
        this.h = h;
        this.t = t;
        this.operands = ((): (CALL | DOT | ATOM)[] => {
        return [this.h.dot || this.h].concat(t.map(e => e.v.dot || e.v));
        })();
        this.call = ((): CALL | DOT | ATOM | undefined => {
        return this.operands.length === 1 ? this.operands[0] : undefined;
        })();
    }
}
export interface FAC_$0 {
    kind: ASTKinds.FAC_$0;
    op: string;
    v: CALL;
}
export class CALL {
    public kind: ASTKinds.CALL = ASTKinds.CALL;
    public h: DOT;
    public t: CALL_$0[];
    public callee: DOT | ATOM;
    public args: (SUM | FAC | CALL | DOT | ATOM)[][];
    public dot: DOT | ATOM | undefined;
    constructor(h: DOT, t: CALL_$0[]){
        this.h = h;
        this.t = t;
        this.callee = ((): DOT | ATOM => {
        return this.h.atom || this.h;
        })();
        this.args = ((): (SUM | FAC | CALL | DOT | ATOM)[][] => {
        return this.t.map(e => e.args ? e.args.v : []);
        })();
        this.dot = ((): DOT | ATOM | undefined => {
        return this.args.length === 0 ? this.callee : undefined;
        })();
    }
}
export interface CALL_$0 {
    kind: ASTKinds.CALL_$0;
    args: Nullable<ARGS>;
}
export class ARGS {
    public kind: ASTKinds.ARGS = ASTKinds.ARGS;
    public h: EXPR;
    public t: ARGS_$0[];
    public v: (SUM | FAC | CALL | DOT | ATOM)[];
    constructor(h: EXPR, t: ARGS_$0[]){
        this.h = h;
        this.t = t;
        this.v = ((): (SUM | FAC | CALL | DOT | ATOM)[] => {
        return [this.h.v].concat(t.map(e => e.v.v));
        })();
    }
}
export interface ARGS_$0 {
    kind: ASTKinds.ARGS_$0;
    v: EXPR;
}
export class DOT {
    public kind: ASTKinds.DOT = ASTKinds.DOT;
    public receiver: ATOM;
    public a: DOT_$0[];
    public accessors: string[];
    public atom: ATOM | undefined;
    constructor(receiver: ATOM, a: DOT_$0[]){
        this.receiver = receiver;
        this.a = a;
        this.accessors = ((): string[] => {
        return this.a.map(e => e.v);
        })();
        this.atom = ((): ATOM | undefined => {
        return this.accessors.length === 0 ? this.receiver : undefined;
        })();
    }
}
export interface DOT_$0 {
    kind: ASTKinds.DOT_$0;
    op: string;
    v: IDENTIFIER;
}
export type ATOM = ATOM_1 | ATOM_2;
export type ATOM_1 = VARREF;
export type ATOM_2 = INTCONST;
export interface VARREF {
    kind: ASTKinds.VARREF;
    name: IDENTIFIER;
}
export class INTCONST {
    public kind: ASTKinds.INTCONST = ASTKinds.INTCONST;
    public s: string;
    public value: number;
    constructor(s: string){
        this.s = s;
        this.value = ((): number => {
        return parseInt(this.s);
        })();
    }
}
export class RETURN {
    public kind: ASTKinds.RETURN = ASTKinds.RETURN;
    public e: EXPR;
    public expr: SUM | FAC | CALL | DOT | ATOM;
    constructor(e: EXPR){
        this.e = e;
        this.expr = ((): SUM | FAC | CALL | DOT | ATOM => {
        return this.e.v;
        })();
    }
}
export class EXTERNFUNC {
    public kind: ASTKinds.EXTERNFUNC = ASTKinds.EXTERNFUNC;
    public externalName: EXTNAME;
    public importName: IDENTIFIER;
    public p: Nullable<FIELDS>;
    public returnType: TYPE;
    public params: FIELD[];
    constructor(externalName: EXTNAME, importName: IDENTIFIER, p: Nullable<FIELDS>, returnType: TYPE){
        this.externalName = externalName;
        this.importName = importName;
        this.p = p;
        this.returnType = returnType;
        this.params = ((): FIELD[] => {
        return this.p ? this.p.v : [];
        })();
    }
}
export type EXTNAME = string;
export interface TYPE {
    kind: ASTKinds.TYPE;
    name: IDENTIFIER;
}
export type IDENTIFIER = string;
export type _ = string;
export type __ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$PROGRAM$memo.clear();
        this.$scope$TOPLEVEL$memo.clear();
        this.$scope$STRUCTDEF$memo.clear();
        this.$scope$FIELDS$memo.clear();
        this.$scope$FIELDS_$0$memo.clear();
        this.$scope$FIELD$memo.clear();
        this.$scope$FUNCDEF$memo.clear();
        this.$scope$VISIBILITY$memo.clear();
        this.$scope$BODY$memo.clear();
        this.$scope$BODY_$0$memo.clear();
        this.$scope$STATEMENT$memo.clear();
        this.$scope$LET$memo.clear();
        this.$scope$EXPR$memo.clear();
        this.$scope$SUM$memo.clear();
        this.$scope$SUM_$0$memo.clear();
        this.$scope$FAC$memo.clear();
        this.$scope$FAC_$0$memo.clear();
        this.$scope$CALL$memo.clear();
        this.$scope$CALL_$0$memo.clear();
        this.$scope$ARGS$memo.clear();
        this.$scope$ARGS_$0$memo.clear();
        this.$scope$DOT$memo.clear();
        this.$scope$DOT_$0$memo.clear();
        this.$scope$ATOM$memo.clear();
        this.$scope$VARREF$memo.clear();
        this.$scope$INTCONST$memo.clear();
        this.$scope$RETURN$memo.clear();
        this.$scope$EXTERNFUNC$memo.clear();
        this.$scope$EXTNAME$memo.clear();
        this.$scope$TYPE$memo.clear();
        this.$scope$IDENTIFIER$memo.clear();
        this.$scope$_$memo.clear();
        this.$scope$__$memo.clear();
    }
    protected $scope$PROGRAM$memo: Map<number, [Nullable<PROGRAM>, PosInfo]> = new Map();
    protected $scope$TOPLEVEL$memo: Map<number, [Nullable<TOPLEVEL>, PosInfo]> = new Map();
    protected $scope$STRUCTDEF$memo: Map<number, [Nullable<STRUCTDEF>, PosInfo]> = new Map();
    protected $scope$FIELDS$memo: Map<number, [Nullable<FIELDS>, PosInfo]> = new Map();
    protected $scope$FIELDS_$0$memo: Map<number, [Nullable<FIELDS_$0>, PosInfo]> = new Map();
    protected $scope$FIELD$memo: Map<number, [Nullable<FIELD>, PosInfo]> = new Map();
    protected $scope$FUNCDEF$memo: Map<number, [Nullable<FUNCDEF>, PosInfo]> = new Map();
    protected $scope$VISIBILITY$memo: Map<number, [Nullable<VISIBILITY>, PosInfo]> = new Map();
    protected $scope$BODY$memo: Map<number, [Nullable<BODY>, PosInfo]> = new Map();
    protected $scope$BODY_$0$memo: Map<number, [Nullable<BODY_$0>, PosInfo]> = new Map();
    protected $scope$STATEMENT$memo: Map<number, [Nullable<STATEMENT>, PosInfo]> = new Map();
    protected $scope$LET$memo: Map<number, [Nullable<LET>, PosInfo]> = new Map();
    protected $scope$EXPR$memo: Map<number, [Nullable<EXPR>, PosInfo]> = new Map();
    protected $scope$SUM$memo: Map<number, [Nullable<SUM>, PosInfo]> = new Map();
    protected $scope$SUM_$0$memo: Map<number, [Nullable<SUM_$0>, PosInfo]> = new Map();
    protected $scope$FAC$memo: Map<number, [Nullable<FAC>, PosInfo]> = new Map();
    protected $scope$FAC_$0$memo: Map<number, [Nullable<FAC_$0>, PosInfo]> = new Map();
    protected $scope$CALL$memo: Map<number, [Nullable<CALL>, PosInfo]> = new Map();
    protected $scope$CALL_$0$memo: Map<number, [Nullable<CALL_$0>, PosInfo]> = new Map();
    protected $scope$ARGS$memo: Map<number, [Nullable<ARGS>, PosInfo]> = new Map();
    protected $scope$ARGS_$0$memo: Map<number, [Nullable<ARGS_$0>, PosInfo]> = new Map();
    protected $scope$DOT$memo: Map<number, [Nullable<DOT>, PosInfo]> = new Map();
    protected $scope$DOT_$0$memo: Map<number, [Nullable<DOT_$0>, PosInfo]> = new Map();
    protected $scope$ATOM$memo: Map<number, [Nullable<ATOM>, PosInfo]> = new Map();
    protected $scope$VARREF$memo: Map<number, [Nullable<VARREF>, PosInfo]> = new Map();
    protected $scope$INTCONST$memo: Map<number, [Nullable<INTCONST>, PosInfo]> = new Map();
    protected $scope$RETURN$memo: Map<number, [Nullable<RETURN>, PosInfo]> = new Map();
    protected $scope$EXTERNFUNC$memo: Map<number, [Nullable<EXTERNFUNC>, PosInfo]> = new Map();
    protected $scope$EXTNAME$memo: Map<number, [Nullable<EXTNAME>, PosInfo]> = new Map();
    protected $scope$TYPE$memo: Map<number, [Nullable<TYPE>, PosInfo]> = new Map();
    protected $scope$IDENTIFIER$memo: Map<number, [Nullable<IDENTIFIER>, PosInfo]> = new Map();
    protected $scope$_$memo: Map<number, [Nullable<_>, PosInfo]> = new Map();
    protected $scope$__$memo: Map<number, [Nullable<__>, PosInfo]> = new Map();
    public matchPROGRAM($$dpth: number, $$cr?: ErrorTracker): Nullable<PROGRAM> {
        return this.memoise(
            () => {
                return this.run<PROGRAM>($$dpth,
                    () => {
                        let $scope$toplevels: Nullable<TOPLEVEL[]>;
                        let $$res: Nullable<PROGRAM> = null;
                        if (true
                            && ($scope$toplevels = this.loop<TOPLEVEL>(() => this.matchTOPLEVEL($$dpth + 1, $$cr), 0, -1)) !== null
                            && this.match$EOF($$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.PROGRAM, toplevels: $scope$toplevels};
                        }
                        return $$res;
                    });
            },
            this.$scope$PROGRAM$memo,
        );
    }
    public matchTOPLEVEL($$dpth: number, $$cr?: ErrorTracker): Nullable<TOPLEVEL> {
        return this.memoise(
            () => {
                return this.choice<TOPLEVEL>([
                    () => this.matchTOPLEVEL_1($$dpth + 1, $$cr),
                    () => this.matchTOPLEVEL_2($$dpth + 1, $$cr),
                    () => this.matchTOPLEVEL_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$TOPLEVEL$memo,
        );
    }
    public matchTOPLEVEL_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TOPLEVEL_1> {
        return this.matchSTRUCTDEF($$dpth + 1, $$cr);
    }
    public matchTOPLEVEL_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TOPLEVEL_2> {
        return this.matchFUNCDEF($$dpth + 1, $$cr);
    }
    public matchTOPLEVEL_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TOPLEVEL_3> {
        return this.matchEXTERNFUNC($$dpth + 1, $$cr);
    }
    public matchSTRUCTDEF($$dpth: number, $$cr?: ErrorTracker): Nullable<STRUCTDEF> {
        return this.memoise(
            () => {
                return this.run<STRUCTDEF>($$dpth,
                    () => {
                        let $scope$name: Nullable<IDENTIFIER>;
                        let $scope$f: Nullable<Nullable<FIELDS>>;
                        let $$res: Nullable<STRUCTDEF> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:struct)`, "", $$dpth + 1, $$cr) !== null
                            && this.match__($$dpth + 1, $$cr) !== null
                            && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && (($scope$f = this.matchFIELDS($$dpth + 1, $$cr)) || true)
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                        ) {
                            $$res = new STRUCTDEF($scope$name, $scope$f);
                        }
                        return $$res;
                    });
            },
            this.$scope$STRUCTDEF$memo,
        );
    }
    public matchFIELDS($$dpth: number, $$cr?: ErrorTracker): Nullable<FIELDS> {
        return this.memoise(
            () => {
                return this.run<FIELDS>($$dpth,
                    () => {
                        let $scope$h: Nullable<FIELD>;
                        let $scope$t: Nullable<FIELDS_$0[]>;
                        let $$res: Nullable<FIELDS> = null;
                        if (true
                            && ($scope$h = this.matchFIELD($$dpth + 1, $$cr)) !== null
                            && ($scope$t = this.loop<FIELDS_$0>(() => this.matchFIELDS_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new FIELDS($scope$h, $scope$t);
                        }
                        return $$res;
                    });
            },
            this.$scope$FIELDS$memo,
        );
    }
    public matchFIELDS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FIELDS_$0> {
        return this.memoise(
            () => {
                return this.run<FIELDS_$0>($$dpth,
                    () => {
                        let $scope$v: Nullable<FIELD>;
                        let $$res: Nullable<FIELDS_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v = this.matchFIELD($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.FIELDS_$0, v: $scope$v};
                        }
                        return $$res;
                    });
            },
            this.$scope$FIELDS_$0$memo,
        );
    }
    public matchFIELD($$dpth: number, $$cr?: ErrorTracker): Nullable<FIELD> {
        return this.memoise(
            () => {
                return this.run<FIELD>($$dpth,
                    () => {
                        let $scope$name: Nullable<IDENTIFIER>;
                        let $scope$type: Nullable<TYPE>;
                        let $$res: Nullable<FIELD> = null;
                        if (true
                            && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$type = this.matchTYPE($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.FIELD, name: $scope$name, type: $scope$type};
                        }
                        return $$res;
                    });
            },
            this.$scope$FIELD$memo,
        );
    }
    public matchFUNCDEF($$dpth: number, $$cr?: ErrorTracker): Nullable<FUNCDEF> {
        return this.memoise(
            () => {
                return this.run<FUNCDEF>($$dpth,
                    () => {
                        let $scope$v: Nullable<Nullable<VISIBILITY>>;
                        let $scope$name: Nullable<IDENTIFIER>;
                        let $scope$p: Nullable<Nullable<FIELDS>>;
                        let $scope$returnType: Nullable<TYPE>;
                        let $scope$b: Nullable<Nullable<BODY>>;
                        let $$res: Nullable<FUNCDEF> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && (($scope$v = this.matchVISIBILITY($$dpth + 1, $$cr)) || true)
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:fn)`, "", $$dpth + 1, $$cr) !== null
                            && this.match__($$dpth + 1, $$cr) !== null
                            && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && (($scope$p = this.matchFIELDS($$dpth + 1, $$cr)) || true)
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:->)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$returnType = this.matchTYPE($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && (($scope$b = this.matchBODY($$dpth + 1, $$cr)) || true)
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                        ) {
                            $$res = new FUNCDEF($scope$v, $scope$name, $scope$p, $scope$returnType, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$FUNCDEF$memo,
        );
    }
    public matchVISIBILITY($$dpth: number, $$cr?: ErrorTracker): Nullable<VISIBILITY> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:pub)`, "", $$dpth + 1, $$cr);
            },
            this.$scope$VISIBILITY$memo,
        );
    }
    public matchBODY($$dpth: number, $$cr?: ErrorTracker): Nullable<BODY> {
        return this.memoise(
            () => {
                return this.run<BODY>($$dpth,
                    () => {
                        let $scope$h: Nullable<STATEMENT>;
                        let $scope$t: Nullable<BODY_$0[]>;
                        let $$res: Nullable<BODY> = null;
                        if (true
                            && ($scope$h = this.matchSTATEMENT($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$t = this.loop<BODY_$0>(() => this.matchBODY_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new BODY($scope$h, $scope$t);
                        }
                        return $$res;
                    });
            },
            this.$scope$BODY$memo,
        );
    }
    public matchBODY_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<BODY_$0> {
        return this.memoise(
            () => {
                return this.run<BODY_$0>($$dpth,
                    () => {
                        let $scope$v: Nullable<STATEMENT>;
                        let $$res: Nullable<BODY_$0> = null;
                        if (true
                            && ($scope$v = this.matchSTATEMENT($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.BODY_$0, v: $scope$v};
                        }
                        return $$res;
                    });
            },
            this.$scope$BODY_$0$memo,
        );
    }
    public matchSTATEMENT($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT> {
        return this.memoise(
            () => {
                return this.choice<STATEMENT>([
                    () => this.matchSTATEMENT_1($$dpth + 1, $$cr),
                    () => this.matchSTATEMENT_2($$dpth + 1, $$cr),
                    () => this.matchSTATEMENT_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$STATEMENT$memo,
        );
    }
    public matchSTATEMENT_1($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT_1> {
        return this.matchLET($$dpth + 1, $$cr);
    }
    public matchSTATEMENT_2($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT_2> {
        return this.matchRETURN($$dpth + 1, $$cr);
    }
    public matchSTATEMENT_3($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT_3> {
        return this.matchCALL($$dpth + 1, $$cr);
    }
    public matchLET($$dpth: number, $$cr?: ErrorTracker): Nullable<LET> {
        return this.memoise(
            () => {
                return this.run<LET>($$dpth,
                    () => {
                        let $scope$name: Nullable<IDENTIFIER>;
                        let $scope$e: Nullable<EXPR>;
                        let $$res: Nullable<LET> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:let)`, "", $$dpth + 1, $$cr) !== null
                            && this.match__($$dpth + 1, $$cr) !== null
                            && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$e = this.matchEXPR($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new LET($scope$name, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$LET$memo,
        );
    }
    public matchEXPR($$dpth: number, $$cr?: ErrorTracker): Nullable<EXPR> {
        return this.memoise(
            () => {
                return this.run<EXPR>($$dpth,
                    () => {
                        let $scope$s: Nullable<SUM>;
                        let $$res: Nullable<EXPR> = null;
                        if (true
                            && ($scope$s = this.matchSUM($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new EXPR($scope$s);
                        }
                        return $$res;
                    });
            },
            this.$scope$EXPR$memo,
        );
    }
    public matchSUM($$dpth: number, $$cr?: ErrorTracker): Nullable<SUM> {
        return this.memoise(
            () => {
                return this.run<SUM>($$dpth,
                    () => {
                        let $scope$h: Nullable<FAC>;
                        let $scope$t: Nullable<SUM_$0[]>;
                        let $$res: Nullable<SUM> = null;
                        if (true
                            && ($scope$h = this.matchFAC($$dpth + 1, $$cr)) !== null
                            && ($scope$t = this.loop<SUM_$0>(() => this.matchSUM_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new SUM($scope$h, $scope$t);
                        }
                        return $$res;
                    });
            },
            this.$scope$SUM$memo,
        );
    }
    public matchSUM_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SUM_$0> {
        return this.memoise(
            () => {
                return this.run<SUM_$0>($$dpth,
                    () => {
                        let $scope$op: Nullable<string>;
                        let $scope$v: Nullable<FAC>;
                        let $$res: Nullable<SUM_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$op = this.regexAccept(String.raw`(?:\+|-)`, "", $$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v = this.matchFAC($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.SUM_$0, op: $scope$op, v: $scope$v};
                        }
                        return $$res;
                    });
            },
            this.$scope$SUM_$0$memo,
        );
    }
    public matchFAC($$dpth: number, $$cr?: ErrorTracker): Nullable<FAC> {
        return this.memoise(
            () => {
                return this.run<FAC>($$dpth,
                    () => {
                        let $scope$h: Nullable<CALL>;
                        let $scope$t: Nullable<FAC_$0[]>;
                        let $$res: Nullable<FAC> = null;
                        if (true
                            && ($scope$h = this.matchCALL($$dpth + 1, $$cr)) !== null
                            && ($scope$t = this.loop<FAC_$0>(() => this.matchFAC_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new FAC($scope$h, $scope$t);
                        }
                        return $$res;
                    });
            },
            this.$scope$FAC$memo,
        );
    }
    public matchFAC_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FAC_$0> {
        return this.memoise(
            () => {
                return this.run<FAC_$0>($$dpth,
                    () => {
                        let $scope$op: Nullable<string>;
                        let $scope$v: Nullable<CALL>;
                        let $$res: Nullable<FAC_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$op = this.regexAccept(String.raw`(?:\*|/)`, "", $$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v = this.matchCALL($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.FAC_$0, op: $scope$op, v: $scope$v};
                        }
                        return $$res;
                    });
            },
            this.$scope$FAC_$0$memo,
        );
    }
    public matchCALL($$dpth: number, $$cr?: ErrorTracker): Nullable<CALL> {
        return this.memoise(
            () => {
                return this.run<CALL>($$dpth,
                    () => {
                        let $scope$h: Nullable<DOT>;
                        let $scope$t: Nullable<CALL_$0[]>;
                        let $$res: Nullable<CALL> = null;
                        if (true
                            && ($scope$h = this.matchDOT($$dpth + 1, $$cr)) !== null
                            && ($scope$t = this.loop<CALL_$0>(() => this.matchCALL_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new CALL($scope$h, $scope$t);
                        }
                        return $$res;
                    });
            },
            this.$scope$CALL$memo,
        );
    }
    public matchCALL_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CALL_$0> {
        return this.memoise(
            () => {
                return this.run<CALL_$0>($$dpth,
                    () => {
                        let $scope$args: Nullable<Nullable<ARGS>>;
                        let $$res: Nullable<CALL_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && (($scope$args = this.matchARGS($$dpth + 1, $$cr)) || true)
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.CALL_$0, args: $scope$args};
                        }
                        return $$res;
                    });
            },
            this.$scope$CALL_$0$memo,
        );
    }
    public matchARGS($$dpth: number, $$cr?: ErrorTracker): Nullable<ARGS> {
        return this.memoise(
            () => {
                return this.run<ARGS>($$dpth,
                    () => {
                        let $scope$h: Nullable<EXPR>;
                        let $scope$t: Nullable<ARGS_$0[]>;
                        let $$res: Nullable<ARGS> = null;
                        if (true
                            && ($scope$h = this.matchEXPR($$dpth + 1, $$cr)) !== null
                            && ($scope$t = this.loop<ARGS_$0>(() => this.matchARGS_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new ARGS($scope$h, $scope$t);
                        }
                        return $$res;
                    });
            },
            this.$scope$ARGS$memo,
        );
    }
    public matchARGS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ARGS_$0> {
        return this.memoise(
            () => {
                return this.run<ARGS_$0>($$dpth,
                    () => {
                        let $scope$v: Nullable<EXPR>;
                        let $$res: Nullable<ARGS_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v = this.matchEXPR($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.ARGS_$0, v: $scope$v};
                        }
                        return $$res;
                    });
            },
            this.$scope$ARGS_$0$memo,
        );
    }
    public matchDOT($$dpth: number, $$cr?: ErrorTracker): Nullable<DOT> {
        return this.memoise(
            () => {
                return this.run<DOT>($$dpth,
                    () => {
                        let $scope$receiver: Nullable<ATOM>;
                        let $scope$a: Nullable<DOT_$0[]>;
                        let $$res: Nullable<DOT> = null;
                        if (true
                            && ($scope$receiver = this.matchATOM($$dpth + 1, $$cr)) !== null
                            && ($scope$a = this.loop<DOT_$0>(() => this.matchDOT_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new DOT($scope$receiver, $scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$DOT$memo,
        );
    }
    public matchDOT_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<DOT_$0> {
        return this.memoise(
            () => {
                return this.run<DOT_$0>($$dpth,
                    () => {
                        let $scope$op: Nullable<string>;
                        let $scope$v: Nullable<IDENTIFIER>;
                        let $$res: Nullable<DOT_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$op = this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.DOT_$0, op: $scope$op, v: $scope$v};
                        }
                        return $$res;
                    });
            },
            this.$scope$DOT_$0$memo,
        );
    }
    public matchATOM($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM> {
        return this.memoise(
            () => {
                return this.choice<ATOM>([
                    () => this.matchATOM_1($$dpth + 1, $$cr),
                    () => this.matchATOM_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ATOM$memo,
        );
    }
    public matchATOM_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_1> {
        return this.matchVARREF($$dpth + 1, $$cr);
    }
    public matchATOM_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_2> {
        return this.matchINTCONST($$dpth + 1, $$cr);
    }
    public matchVARREF($$dpth: number, $$cr?: ErrorTracker): Nullable<VARREF> {
        return this.memoise(
            () => {
                return this.run<VARREF>($$dpth,
                    () => {
                        let $scope$name: Nullable<IDENTIFIER>;
                        let $$res: Nullable<VARREF> = null;
                        if (true
                            && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.VARREF, name: $scope$name};
                        }
                        return $$res;
                    });
            },
            this.$scope$VARREF$memo,
        );
    }
    public matchINTCONST($$dpth: number, $$cr?: ErrorTracker): Nullable<INTCONST> {
        return this.memoise(
            () => {
                return this.run<INTCONST>($$dpth,
                    () => {
                        let $scope$s: Nullable<string>;
                        let $$res: Nullable<INTCONST> = null;
                        if (true
                            && ($scope$s = this.regexAccept(String.raw`(?:[\-\+]?\d+)`, "", $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new INTCONST($scope$s);
                        }
                        return $$res;
                    });
            },
            this.$scope$INTCONST$memo,
        );
    }
    public matchRETURN($$dpth: number, $$cr?: ErrorTracker): Nullable<RETURN> {
        return this.memoise(
            () => {
                return this.run<RETURN>($$dpth,
                    () => {
                        let $scope$e: Nullable<EXPR>;
                        let $$res: Nullable<RETURN> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:return)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$e = this.matchEXPR($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new RETURN($scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$RETURN$memo,
        );
    }
    public matchEXTERNFUNC($$dpth: number, $$cr?: ErrorTracker): Nullable<EXTERNFUNC> {
        return this.memoise(
            () => {
                return this.run<EXTERNFUNC>($$dpth,
                    () => {
                        let $scope$externalName: Nullable<EXTNAME>;
                        let $scope$importName: Nullable<IDENTIFIER>;
                        let $scope$p: Nullable<Nullable<FIELDS>>;
                        let $scope$returnType: Nullable<TYPE>;
                        let $$res: Nullable<EXTERNFUNC> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:import)`, "", $$dpth + 1, $$cr) !== null
                            && this.match__($$dpth + 1, $$cr) !== null
                            && ($scope$externalName = this.matchEXTNAME($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:as)`, "", $$dpth + 1, $$cr) !== null
                            && this.match__($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:fn)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$importName = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && (($scope$p = this.matchFIELDS($$dpth + 1, $$cr)) || true)
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:->)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$returnType = this.matchTYPE($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                        ) {
                            $$res = new EXTERNFUNC($scope$externalName, $scope$importName, $scope$p, $scope$returnType);
                        }
                        return $$res;
                    });
            },
            this.$scope$EXTERNFUNC$memo,
        );
    }
    public matchEXTNAME($$dpth: number, $$cr?: ErrorTracker): Nullable<EXTNAME> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z\d_]*(\.[a-zA-Z][a-zA-Z\d_]*)*)`, "", $$dpth + 1, $$cr);
            },
            this.$scope$EXTNAME$memo,
        );
    }
    public matchTYPE($$dpth: number, $$cr?: ErrorTracker): Nullable<TYPE> {
        return this.memoise(
            () => {
                return this.run<TYPE>($$dpth,
                    () => {
                        let $scope$name: Nullable<IDENTIFIER>;
                        let $$res: Nullable<TYPE> = null;
                        if (true
                            && ($scope$name = this.matchIDENTIFIER($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.TYPE, name: $scope$name};
                        }
                        return $$res;
                    });
            },
            this.$scope$TYPE$memo,
        );
    }
    public matchIDENTIFIER($$dpth: number, $$cr?: ErrorTracker): Nullable<IDENTIFIER> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z\d_]*)`, "", $$dpth + 1, $$cr);
            },
            this.$scope$IDENTIFIER$memo,
        );
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:\s*)`, "", $$dpth + 1, $$cr);
            },
            this.$scope$_$memo,
        );
    }
    public match__($$dpth: number, $$cr?: ErrorTracker): Nullable<__> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:\s+)`, "", $$dpth + 1, $$cr);
            },
            this.$scope$__$memo,
        );
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchPROGRAM(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchPROGRAM(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchPROGRAM(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<PROGRAM>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}